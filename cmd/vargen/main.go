package main

import (
	"flag"
	template2 "github.com/mtreload/VariablesGenerator/internal/template"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type arrayFlag struct {
	Values []string
}

func (af *arrayFlag) String() string {
	b := strings.Builder{}
	for i := range af.Values {
		b.WriteString(af.Values[i])
	}

	return b.String()
}

func (af *arrayFlag) Set(val string) error {
	af.Values = append(af.Values, val)
	return nil
}

func (af *arrayFlag) Len() int {
	return len(af.Values)
}

type Variable struct {
	Value string
	Name  string
}

type Templa struct {
	Package   string
	Meta      Meta
	Variables []Variable
}

type Meta struct {
	Message string
}

func main() {
	inFileNames := arrayFlag{}
	flag.Var(&inFileNames, "i", "input filenames\n"+
		"At least 1 required")
	outFileName := flag.String("o", "", "path to output file")
	packNameVal := flag.String("p", "", "name of package to put into file\n"+
		"Default is name of folder output file is stored")

	flag.Parse()

	if inFileNames.Len() == 0 {
		log.Fatal("Input file(s) is required")
	}
	if *outFileName == "" {
		log.Fatal("Output file is required")
	}

	if *packNameVal == "" {
		packName, err := filepath.Abs(*outFileName)
		if err != nil {
			log.Fatal("can't get dir name: " + err.Error())
		}
		packName = filepath.Dir(packName)
		packName = filepath.Base(packName)

		*packNameVal = packName
	}

	t := Templa{
		Package:   *packNameVal,
		Meta:      Meta{Message: "This file is generated by vargen. Please, do not modify it."},
		Variables: []Variable{},
	}

	for _, inFileName := range inFileNames.Values {
		b, err := ioutil.ReadFile(inFileName)
		if err != nil {
			log.Fatal("can't read input file: " + err.Error())
		}

		val := string(b)

		val = strings.Replace(val, "\r", ``, -1)
		val = strings.Replace(val, "\\", `\\`, -1)
		val = strings.Replace(val, "\n", `\n`, -1)
		val = strings.Replace(val, "\"", `\"`, -1)

		varName := filepath.Base(inFileName)
		dotIdx := strings.Index(varName, ".")
		if dotIdx != -1 {
			varName = varName[:dotIdx]
		}
		varName = strings.ToUpper(varName[:1]) + varName[1:]

		t.Variables = append(t.Variables, Variable{
			Value: val,
			Name:  varName,
		})
	}

	teml, err := template.New("out").Parse(template2.Golang)
	if err != nil {
		log.Fatal("can't parse template: " + err.Error())
	}

	outFile, err := os.OpenFile(*outFileName, os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal("can't open output file: " + err.Error())
	}
	defer outFile.Close()

	err = teml.Execute(outFile, t)
	if err != nil {
		log.Fatal("can't execute template: " + err.Error())
	}
}
