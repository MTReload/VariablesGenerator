package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type Variable struct {
	Value string
	Name  string
}

type Templa struct {
	Package   string
	Meta      Meta
	Variables []Variable
}

type Meta struct {
	Message string
}

const (
	outTemplate string = `
{{- /*gotype: VariablesGenerator/cmd/vargen.Templa*/ -}}
//{{ .Meta.Message }}
package {{ .Package }}

    
var (
{{range .Variables}}
    {{ .Name }} = "{{.Value}}"
{{end}}
)`
)

func main() {
	inFileName := flag.String("i", "", "path to input file")
	outFileName := flag.String("o", "", "path to output file")
	packName := flag.String("p", "", "name of package to put into file\n"+
		"Default is name of folder output file is stored")

	flag.Parse()

	if *inFileName == "" {
		log.Fatal("Input file is required")
	}
	if *outFileName == "" {
		log.Fatal("Input file is required")
	}

	b, err := ioutil.ReadFile(*inFileName)
	if err != nil {
		log.Fatal("can't read input file: " + err.Error())
	}

	if *packName == "" {
		*packName, err = filepath.Abs(*inFileName)
		if err != nil {
			log.Fatal("can't get dir name: " + err.Error())
		}
		*packName = filepath.Dir(*packName)
		*packName = filepath.Base(*packName)
	}

	val := string(b)

	val = strings.Replace(val, "\r", ``, -1)
	val = strings.Replace(val, "\\", `\\`, -1)
	val = strings.Replace(val, "\n", `\n`, -1)
	val = strings.Replace(val, "\"", `\"`, -1)

	varName := filepath.Base(*inFileName)
	dotIdx := strings.Index(varName, ".")
	if dotIdx != -1 {
		varName = varName[:dotIdx]
	}
	varName = strings.ToUpper(varName[:1]) + varName[1:]

	t := Templa{
		Package: *packName,
		Meta:    Meta{Message: "This file is generated by vargen. Please, do not modify it."},
		Variables: []Variable{
			{
				Value: val,
				Name:  varName,
			},
		},
	}

	teml, err := template.New("out").Parse(outTemplate)
	if err != nil {
		log.Fatal("can't parse template: " + err.Error())
	}

	outFile, err := os.OpenFile(*outFileName, os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Fatal("can't open output file: " + err.Error())
	}
	defer outFile.Close()

	err = teml.Execute(outFile, t)
	if err != nil {
		log.Fatal("can't execute template: " + err.Error())
	}
}
